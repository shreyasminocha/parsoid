# This is the Transformer unit test file that works with transformerTests.js
# Each type of transformer/hander is specified using ':' followed
# by the transformer name, for example, ": QuoteTransformer" and
# is ended when a new transformer is specified, such as ": ListHandler"
# Tests are specified by using '!' which precedes the test description.
# Input tokens are recognized as either a list '{' with a "type"
# or just any characters for text tokens. If the first character on a
# line is '[' then the following array of list items specifies
# the desired result to compare against and ends the current test.
#
# To execute this test, choose a transformer such as ListHandler and
# the from the command line in the parsoid directory, type:
# $ node bin/transformTest.js --manual --ListHandler --inputFile tests/transformTests.txt
#
# Only the ListHandler section will be processed and report passed or failed tests

: QuoteTransformer
# Start of QuoteTransformer unit tests

! Verify '''bell'' unbalanced quotes wikitext
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[],"dataAttribs":{"tsr":[0,3]},"value":"'''"}
"bell"
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[],"dataAttribs":{"tsr":[7,9]},"value":"''"}
{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}
["'",{"type":"TagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[1,3]}},"bell",{"type":"EndTagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[7,9]}},{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}]

! Verify '''''foo''''' wikitext
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "'''''"}],"dataAttribs":{"tsr":[0,5]}}
"foo"
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "'''''"}],"dataAttribs":{"tsr":[8,13]}}
{"type":"NlTk","dataAttribs":{"tsr":[13,14]}}
[{"type":"TagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[0,2]}},{"type":"TagTk","name":"b","attribs":[],"dataAttribs":{"tsr":[2,5]}},"foo",{"type":"EndTagTk","name":"b","attribs":[],"dataAttribs":{"tsr":[8,11]}},{"type":"EndTagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[11,13]}},{"type":"NlTk","dataAttribs":{"tsr":[13,14]}}]

! Verify '''bar''' wikitext
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "'''"}],"dataAttribs":{"tsr":[0,3]}}
"bar"
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "'''"}],"dataAttribs":{"tsr":[6,9]}}
{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}
[{"type":"TagTk","name":"b","attribs":[],"dataAttribs":{"tsr":[0,3]}},"bar",{"type":"EndTagTk","name":"b","attribs":[],"dataAttribs":{"tsr":[6,9]}},{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}]

! Verify ''song'' wikitext
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "''"}],"dataAttribs":{"tsr":[0,2]}}
"song"
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "''"}],"dataAttribs":{"tsr":[6,8]}}
{"type":"NlTk","dataAttribs":{"tsr":[8,9]}}
[{"type":"TagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[0,2]}},"song",{"type":"EndTagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[6,8]}},{"type":"NlTk","dataAttribs":{"tsr":[8,9]}}]

! Verify '''bell'' unbalanced quotes wikitext
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "'''"}],"dataAttribs":{"tsr":[0,3]}}
"bell"
{"type":"SelfclosingTagTk","name":"mw-quote","attribs":[{"k":"value", "v": "''"}],"dataAttribs":{"tsr":[7,9]}}
{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}
["'",{"type":"TagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[1,3]}},"bell",{"type":"EndTagTk","name":"i","attribs":[],"dataAttribs":{"tsr":[7,9]}},{"type":"NlTk","dataAttribs":{"tsr":[9,10]}}]

# End of QuoteTransformer unit tests

: ListHandler
# Start of ListHandler unit tests

! Verify start of list item in wikitext
{"type":"TagTk","name":"listItem","attribs":[],"dataAttribs":{"tsr":[0,1]},"bullets":["*"]}
[{"type":"TagTk","name":"ul","attribs":[],"dataAttribs":{"tsr":[0,0]}},{"type":"TagTk","name":"li","attribs":[],"dataAttribs":{"tsr":[0,1]}}]

! Verify single depth list item in wikitext
" A newline"
{"type":"NlTk","dataAttribs":{"tsr":[11,12]}}
{"type":"TagTk","name":"listItem","attribs":[],"dataAttribs":{"tsr":[12,13]},"bullets":["*"]}
[{"type":"EndTagTk","name":"li","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[11,12]}},{"type":"TagTk","name":"li","attribs":[],"dataAttribs":{"tsr":[12,13]}}]

! Verify a second single depth list item in wikitext
" in a list"
{"type":"NlTk","dataAttribs":{"tsr":[23,24]}}
"marks the end of the list. Of course"
[{"type":"EndTagTk","name":"li","attribs":[],"dataAttribs":{}},{"type":"EndTagTk","name":"ul","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[23,24]}},"marks the end of the list. Of course"]

! Verify single depth list terminates on a newline in wikitext
{"type":"TagTk","name":"listItem","attribs":[],"dataAttribs":{"tsr":[61,62]},"bullets":["*"]}
[{"type":"TagTk","name":"ul","attribs":[],"dataAttribs":{"tsr":[61,61]}},{"type":"TagTk","name":"li","attribs":[],"dataAttribs":{"tsr":[61,62]}}]

! Verify single depth list item after text on newline in wikitext
" you can"
{"type":"NlTk","dataAttribs":{"tsr":[70,71]}}
{"type":"TagTk","name":"listItem","attribs":[],"dataAttribs":{"tsr":[71,72]},"bullets":["*"]}
[{"type":"EndTagTk","name":"li","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[70,71]}},{"type":"TagTk","name":"li","attribs":[],"dataAttribs":{"tsr":[71,72]}}]

! Verify a second single depth list item in wikitext
" start again."
{"type":"NlTk","dataAttribs":{"tsr":[85,86]}}
{"type":"TagTk","name":"listItem","attribs":[],"dataAttribs":{"tsr":[86,88]},"bullets":["*","*"]}
[{"type":"NlTk","dataAttribs":{"tsr":[85,86]}},{"type":"TagTk","name":"ul","attribs":[],"dataAttribs":{"tsr":[86,86]}},{"type":"TagTk","name":"li","attribs":[],"dataAttribs":{"tsr":[86,88]}}]

! Verify a double depth list item in wikitext
" and go deeper by a level too"
{"type":"NlTk","dataAttribs":{"tsr":[117,118]}}
{"type":"EOFTk"}
[{"type":"EndTagTk","name":"li","attribs":[],"dataAttribs":{}},{"type":"EndTagTk","name":"ul","attribs":[],"dataAttribs":{}},{"type":"EndTagTk","name":"li","attribs":[],"dataAttribs":{}},{"type":"EndTagTk","name":"ul","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[117,118]}},{"type":"EOFTk"}]

# End of ListHandler unit tests

: ParagraphWrapper
# Start of ParagraphWrapper unit tests

! Verify ParagraphWrapper functionality in wikitext
{"type":"TagTk","name":"blockquote","attribs":[],"dataAttribs":{"tsr":[0,12],"stx":"html"}}
[]
{"type":"NlTk","dataAttribs":{"tsr":[12,13]}}
"foo"
[{"type":"TagTk","name":"blockquote","attribs":[],"dataAttribs":{"tsr":[0,12],"stx":"html"}},{"type":"NlTk","dataAttribs":{"tsr":[12,13]}}]
{"type":"NlTk","dataAttribs":{"tsr":[16,17]}}
{"type":"EndTagTk","name":"blockquote","attribs":[],"dataAttribs":{"tsr":[17,30],"stx":"html"}}
[{"type":"TagTk","name":"p","attribs":[],"dataAttribs":{}},"foo",{"type":"EndTagTk","name":"p","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[16,17]}}]
{"type":"NlTk","dataAttribs":{"tsr":[30,31]}}
{"type":"NlTk","dataAttribs":{"tsr":[31,32]}}
"bar"
[{"type":"EndTagTk","name":"blockquote","attribs":[],"dataAttribs":{"tsr":[17,30],"stx":"html"}},{"type":"NlTk","dataAttribs":{"tsr":[30,31]}},{"type":"NlTk","dataAttribs":{"tsr":[31,32]}}]
{"type":"NlTk","dataAttribs":{"tsr":[35,36]}}
{"type":"NlTk","dataAttribs":{"tsr":[36,37]}}
{"type":"TagTk","name":"pre","attribs":[],"dataAttribs":{"tsr":[37,38]}}
[{"type":"TagTk","name":"p","attribs":[],"dataAttribs":{}},"bar",{"type":"EndTagTk","name":"p","attribs":[],"dataAttribs":{}},{"type":"NlTk","dataAttribs":{"tsr":[35,36]}},{"type":"NlTk","dataAttribs":{"tsr":[36,37]}},{"type":"TagTk","name":"pre","attribs":[],"dataAttribs":{"tsr":[37,38]}}]
"baz"
["baz"]
{"type":"EndTagTk","name":"pre","attribs":[],"dataAttribs":{}}
[{"type":"EndTagTk","name":"pre","attribs":[],"dataAttribs":{}}]
{"type":"EOFTk"}
[{"type":"EOFTk"}]

# End of ParagraphWrapper unit tests

: PreHandler
# Start of PreHandler unit tests

! Verify pre handler in wikitext
{"type":"CommentTk","value":"comment&#x2D;&#x3E; foo\n bar\n<!&#x2D;&#x2D;comment&#x2D;&#x3E; \n baz","dataAttribs":{"tsr":[0,42]}}
{"type":"EOFTk"}
[{"type":"CommentTk","value":"comment&#x2D;&#x3E; foo\n bar\n<!&#x2D;&#x2D;comment&#x2D;&#x3E; \n baz","dataAttribs":{"tsr":[0,42]}},{"type":"EOFTk"}]

# End of PreHandler unit tests
